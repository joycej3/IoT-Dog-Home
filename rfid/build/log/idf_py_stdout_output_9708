[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D D:\John\IoT\iot-project\rfid\build\bootloader\esp-idf\esptool_py && C:\Users\clare\.espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Users/clare/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 D:/John/IoT/iot-project/rfid/build/bootloader/bootloader.bin"
Bootloader binary size 0x6700 bytes. 0x900 bytes (8%) free.
[2/9] Building C object esp-idf/step_motor/CMakeFiles/__idf_step_motor.dir/stepper.c.obj
[3/9] Linking C static library esp-idf\step_motor\libstep_motor.a
[4/9] Linking C static library esp-idf\main\libmain.a
[5/9] Generating ld/sections.ld
[6/9] Building C object CMakeFiles/rfid.elf.dir/project_elf_src_esp32.c.obj
[7/9] Linking CXX executable rfid.elf
[8/9] Generating binary image from built executable
esptool.py v4.4
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/John/IoT/iot-project/rfid/build/rfid.bin
[9/9] cmd.exe /C "cd /D D:\John\IoT\iot-project\rfid\build\esp-idf\esptool_py && C:\Users\clare\.espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Users/clare/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app D:/John/IoT/iot-project/rfid/build/partition_table/partition-table.bin D:/John/IoT/iot-project/rfid/build/rfid.bin"
rfid.bin binary size 0x38720 bytes. Smallest app partition is 0x100000 bytes. 0xc78e0 bytes (78%) free.
